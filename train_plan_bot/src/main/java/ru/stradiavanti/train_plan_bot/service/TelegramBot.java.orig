package ru.stradiavanti.train_plan_bot.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
<<<<<<< HEAD
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
=======
>>>>>>> c0ac39f34d9131a637f10bde205b8212724af239
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.stradiavanti.train_plan_bot.config.BotConfig;
<<<<<<< HEAD
import ru.stradiavanti.train_plan_bot.model.Trainer;
import ru.stradiavanti.train_plan_bot.model.TrainerRepository;
import ru.stradiavanti.train_plan_bot.model.User;
import ru.stradiavanti.train_plan_bot.model.UserRepository;
=======
import ru.stradiavanti.train_plan_bot.model.*;
>>>>>>> c0ac39f34d9131a637f10bde205b8212724af239

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
<<<<<<< HEAD
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Optional;
=======
import java.time.LocalTime;
import java.util.*;
>>>>>>> c0ac39f34d9131a637f10bde205b8212724af239

@Component
@Slf4j
// TelegramLongPollingBot - –±–æ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–±
// –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.
// TelegramWebHookBot - –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ –º–æ–º–µ–Ω—Ç –∏—Ö
// –æ—Ç–ø—Ä–∞–≤–∫–∏. –ë–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω, –Ω–æ —Å–ª–æ–∂–Ω–µ–µ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.

/* TelegramLongPollingBot :: –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å, —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ
–º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å */
public class TelegramBot extends TelegramLongPollingBot {
  /* –°–≤–æ–π—Å—Ç–≤–∞ */
  // –û–±—ä—è–≤–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ BotConfig
  public enum UserStatus {
    Unknown, PotentialClient, Client, Coach
  }
  @Autowired
  // –í–∫–ª—é—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏ –≤–Ω–µ–¥—Ä—è–µ–º –µ–µ
  private UserRepository userRepository;
  @Autowired
  private TrainerRepository trainerRepository;
<<<<<<< HEAD
  private UserStatus userStatus;
=======
  @Autowired
  private ScheduleRepository scheduleRepository;
>>>>>>> c0ac39f34d9131a637f10bde205b8212724af239
  private final BotConfig config;
  // –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  private Long chatId;
  private Integer sentMessageId;
  private Long sentChatId;
  private String curUserName;
  private List<BotCommand> listOfCommands = null;
  /* –°–æ–±—ã—Ç–∏—è */
  private final String __APPLY_SUBSCRIPTION_BUTTON = "__APPLY_SUBSCRIPTION_BUTTON";
  private final String __REJECT_SUBSCRIPTION_BUTTON = "__REJECT_SUBSCRIPTION_BUTTON";
  private final String __SELECT_COACH_BUTTON = "__SELECT_SELECT_COACH_BUTTON";
  private final String __REJECT_COACH_BUTTON = "__REJECT_COACH_BUTTON";
  private final String __COACHES_LIST_BUTTON = "__COACHES_LIST_BUTTON";
  private final String __REGISTER_CLIENT_BUTTON = "__REGISTER_CLIENT_BUTTON";
  private final String __COACH_INFO_BUTTON = "__COACH_INFO_BUTTON";
  private final String __RATE_COACH_WORK_BUTTON = "__RATE_COACH_WORK_BUTTON";
  private final String __CHANGE_COACH_BUTTON = "__CHANGE_COACH_BUTTON";
  private final String __SET_COACH_RATING_ONE_STAR = "__SET_COACH_RATING_ONE_STAR";
  private final String __SET_COACH_RATING_TWO_STAR = "__SET_COACH_RATING_TWO_STAR";
  private final String __SET_COACH_RATING_THREE_STAR = "__SET_COACH_RATING_THREE_STAR";
  private final String __SET_COACH_RATING_FOUR_STAR = "__SET_COACH_RATING_FOUR_STAR";
  private final String __SET_COACH_RATING_FIVE_STAR = "__SET_COACH_RATING_FIVE_STAR";

<<<<<<< HEAD
  // –§–ª–∞–≥–∏
  boolean choosingCoach;
  boolean changesCoachRating;
  // ---
=======
  private final String CALLBACK_YES = "__YES";
  private final String CALLBACK_NO = "__NO";
  private final String CALLBACK_SET_SUBSCRIPTION = "__SET_SUBSCRIPTION";
  private final String CALLBACK_DELETE_SUBSCRIPTION = "__DELETE_SUBSCRIPTION";
  private final String CALLBACK_FITNESS = "__FITNESS";
  private final String CALLBACK_BODYBUILDING = "__BODYBUILDING";
  private final String CALLBACK_YOGA = "__YOGA";

>>>>>>> c0ac39f34d9131a637f10bde205b8212724af239
  private final String HELP_TEXT = "\n***\n\n–ú–æ–∏ —Ñ-—Ü–∏–∏ :\n" +
    "- –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ /getschedule" +
    "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n- –ó–∞–ø–∏—Å–∞—Ç—å –∫ —Ç—Ä–µ–Ω–µ—Ä—É : /setcoach\n- –û—Ç—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–∫–∞ —Ç—ã –Ω–µ" +
    " –Ω–∞—á–Ω–µ—à—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ" +
    "—Ö–æ–¥–∏—Ç—å –Ω–∞" +
    " —Ç—Ä–µ–Ω–∏ (–∏–ª–∏ –Ω–µ –¥–æ–±–∞–≤–∏—à—å –º–µ–Ω—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫).\n\n***";

<<<<<<< HEAD


=======
  private Long trainerId;

  /* –ú–µ—Ç–æ–¥—ã */
>>>>>>> c0ac39f34d9131a637f10bde205b8212724af239
  public TelegramBot(BotConfig config) {
    super(config.getToken());
    this.config = config;
    choosingCoach = false;
    changesCoachRating = false;

    userStatus = UserStatus.Unknown;
    // –†–µ–∞–ª–∏–∑—É–µ–º –º–µ–Ω—é
    makeMenu();
    setMenu();

  }

  @Override
  public String getBotUsername() {
    return config.getBotName();
  }

  @Override
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è, –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –º—ã –¥–æ–ª–∂–Ω—ã –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.
  public void onUpdateReceived(Update update) {

    // TODO –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –º–µ–Ω—é, –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã : —Ç—Ä–µ–Ω–µ—Ä –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≥–¥–µ
    //  –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞, –ø–æ–ª—É—á–∏—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç.–ø.
    if (update.hasMessage() && update.getMessage().hasText()) {

      String userMessageText = update.getMessage().getText();
      curUserName = update.getMessage().getChat().getFirstName();
      // –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      chatId = update.getMessage().getChatId();

<<<<<<< HEAD
      if (!choosingCoach && !changesCoachRating) {
        switch (userMessageText) {
          case "/start":
            //registerUser(update.getMessage());
            startCommandReceived();

            break;
          case "/register":
            // –í—ã–Ω–æ—Å–∏–º –≤—Å–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
            register();
            break;
          case "/coach":
            coach();
            break;
          case "/schedule":
            schedule();
            break;
          case "/help":
            // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
            justSendMessage(chatId, HELP_TEXT);
            log.info("Replied to user " + curUserName);
=======
      switch (mesText) {
        case "/start":
          startCommandReceived(chatId, name);

          break;
        case "/register":
          // –í—ã–Ω–æ—Å–∏–º –≤—Å–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
          confirmSubscription(chatId);
          break;
        case "/getschedule":
          sendSchedule(chatId);
          break;
        case "/help":
          // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
          justSendMessage(chatId, HELP_TEXT);
          log.info("Replied to user " + name);
>>>>>>> c0ac39f34d9131a637f10bde205b8212724af239

            break;
          default:
            justSendMessage(chatId, "üò¨ –Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å, —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –º–µ–Ω—è –Ω–µ " +
              "–∑–∞–ª–æ–∂–µ–Ω–∞");
        }
      }
      else if (choosingCoach) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –§–ò–û —Ç—Ä–µ–Ω–µ—Ä–∞
        List<String> name = List.of(userMessageText.split(" "));
        SendMessage botMessage = new SendMessage();
        botMessage.setChatId(chatId);
        botMessage.setReplyToMessageId(update.getMessage().getMessageId());

        String botMessageText;
        if (name.size() != 3) {
          botMessageText = "üò≠ –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û !";
        } else {
          Optional<Trainer> trainer =
            trainerRepository.findByLastNameAndFirstNameAndFatherName(
            name.get(0),
            name.get(1),
            name.get(2)
          );
          if (trainer.isPresent()) {
            User user = userRepository.findById(chatId).get();
            user.setTrainerId(trainer.get().getId());

            botMessageText =
              "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é " + name.get(0) + " " + name.get(1) + " " + name.get(2) +
              " - " +
              "–≤–∞—à –Ω–æ–≤—ã–π —Ç—Ä–µ–Ω–µ—Ä.";
            trainer.get().setIsFree(false);

            trainerRepository.save(trainer.get());
            userRepository.save(user);

          } else {
            botMessageText = "ü§î –•–º, –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ —Å —Ç–∞–∫–∏–º –§–ò–û.";
          }
        }
        botMessage.setText(botMessageText);
        sendMessage(botMessage);
        choosingCoach = false;
      }
      else if (changesCoachRating) {
        try {
          Double newRating = Double.parseDouble(userMessageText);
          updateCoachRating("‚úçÔ∏è –û–±–Ω–æ–≤–ª—è—é —Ä–µ–π—Ç–∏–Ω–≥ —Ç—Ä–µ–Ω–µ—Ä–∞ ...", newRating);
        } catch (NumberFormatException e) {
          justSendMessage(chatId,"üò¨ –í—ã –≤–≤–µ–ª–∏ —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞ !");
        }
        changesCoachRating = false;
      }
    // –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.
    }
    else if (update.hasCallbackQuery()) {
      CallbackQuery callbackQuery = update.getCallbackQuery();

      Message sentMessage = callbackQuery.getMessage();
      String data = callbackQuery.getData();

      sentMessageId = sentMessage.getMessageId();
      sentChatId = sentMessage.getChatId();

      String editedMessageText;

      if (data.equals(__APPLY_SUBSCRIPTION_BUTTON)) {

        DateFormat dt = new SimpleDateFormat("dd.MM.yy");
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.MONTH, 3);

        registerUser(sentMessage);

<<<<<<< HEAD
        editedMessageText = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –Ω–∞—à —Ñ–∏—Ç–Ω–µ—Å –∫–ª—É–±, –≤–∞–º –≤—ã–¥–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π " +
          "–∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –¥–æ " + dt.format(cal.getTime());

        userStatus = UserStatus.Client;
        makeMenu();
        setMenu();

        sendEditedMessage(sentChatId, sentMessageId, editedMessageText, Optional.empty());

      } else if (data.equals(__REGISTER_CLIENT_BUTTON)) {
        // –ë—É–¥–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å
        register();

      } else if (data.equals(__REJECT_SUBSCRIPTION_BUTTON)) {
        editedMessageText = "ü§ë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—É–º–∞–π—Ç–µ –µ—â–µ —Ä–∞–∑, –æ—á–µ–Ω—å —Ö–æ—Ç–∏–º –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ.";
        sendEditedMessage(sentChatId, sentMessageId, editedMessageText, Optional.empty());

      } else if (data.equals(__COACHES_LIST_BUTTON)) {
        editedMessageText = getCoachesList();

        sendEditedMessage(
          sentChatId,
          sentMessageId,
          editedMessageText,
          Optional.of(
            makeInlineKeyboardMarkup(
              List.of(
                "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º",
                "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ !"
              ),
              List.of(
                __SELECT_COACH_BUTTON,
                __REJECT_COACH_BUTTON
              ),
              2
            )
          )
        );
      }
      else if (data.equals(__SELECT_COACH_BUTTON)) {

        // –ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        justSendMessage(sentChatId, "‚úçÔ∏è –í–≤–µ–¥–∏ –§–ò–û —Ç—Ä–µ–Ω–µ—Ä–∞, –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ, –º–µ–∂–¥—É " +
          "—Å–ª–æ–≤–∞–º–∏ " +
          "—Å—Ç–∞–≤—å –ø—Ä–æ–±–µ–ª—ã, –Ω–µ –ø–∏—à–∏ –ª–∏—à–Ω–µ–≥–æ !");
        choosingCoach = true;
=======
        text = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –Ω–∞—à –∫–ª—É–±, –≤–∞–º –≤—ã–¥–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π " +
          "–∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –¥–æ " + dt.format(cal.getTime());
        callbackDataEditMes(chatId, mesId, text);
        sendTrainer(chatId, trainerId);
        sendSchedule(chatId);

      } else if (callbackData.equals(CALLBACK_SET_SUBSCRIPTION)) {
        // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        chooseUserSpecialization(chatId);
>>>>>>> c0ac39f34d9131a637f10bde205b8212724af239


      } else if (callbackData.equals(CALLBACK_DELETE_SUBSCRIPTION)) {
        text = "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, –Ω–∞–¥–µ—é—Å—å –º—ã –µ—â–µ —É–≤–∏–¥–∏–º—Å—è —Å–Ω–æ–≤–∞";
        callbackDataEditMes(chatId, mesId, text);
        userRepository.deleteById(chatId);
        scheduleRepository.deleteById(chatId);

      } else if (callbackData.equals(CALLBACK_FITNESS)) {
        trainerId = getSpecialTrainerId("–§–∏—Ç–Ω–µ—Å");
        confirmSubscription(chatId);

      } else if (callbackData.equals(CALLBACK_BODYBUILDING)) {
        trainerId = getSpecialTrainerId("–ë–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥");
        confirmSubscription(chatId);

      } else if (callbackData.equals(CALLBACK_YOGA)) {
        trainerId = getSpecialTrainerId("–ô–æ–≥–∞");
        confirmSubscription(chatId);

      }
      else if (data.equals(__REJECT_COACH_BUTTON)) {
        editedMessageText = "üò¨ –û—á–µ–Ω—å –∂–∞–ª—å, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–º–µ–º " +
          "–ê—Ä–Ω–æ–ª—å–¥–∞ –®–≤–∞—Ä—Ü–Ω–µ–≥–µ—Ä–∞.";

        sendEditedMessage(
          sentChatId,
          sentMessageId,
          editedMessageText,
          Optional.empty()
        );
      }
      else if (data.equals(__CHANGE_COACH_BUTTON)) {
        User client = userRepository.findById(sentChatId).get();
        Trainer trainer = trainerRepository.findById(client.getTrainerId()).get();
        client.setTrainerId(-1L);
        trainer.setIsFree(true);

        userRepository.save(client);
        trainerRepository.save(trainer);

        editedMessageText = "üòé –¢–∞–∫—Å, —Ç–µ–ø–µ—Ä—å —Ç—ã –≥–æ–Ω—è–µ—à—å –±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞, –Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç " +
          "–º–æ–∂–µ—à—å" +
          " " +
          "–≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ.";

        sendEditedMessage(
          sentChatId,
          sentMessageId,
          editedMessageText,
          Optional.of(
            makeInlineKeyboardMarkup(
              List.of("–í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞"),
              List.of(__COACHES_LIST_BUTTON),
              1
            )
          )
        );

      }
      else if (data.equals(__COACH_INFO_BUTTON)) {
        User client = userRepository.findById(sentChatId).get();
        Trainer trainer = trainerRepository.findById(client.getTrainerId()).get();

        String trainerInfo =
          "\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º —Ç—Ä–µ–Ω–µ—Ä–µ\n\n- –§–ò–û : " + trainer.getLastName() + " " + trainer.getFirstName() + " " + trainer.getFatherName() +
          "\n- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è : " + trainer.getSpecialization() +
          String.format("\n- –†–µ–π—Ç–∏–Ω–≥ : %.2f", getCoachRating(
            trainer.getSumOfVotes(),
            trainer.getNumberOfVotes()
          ));

        SendPhoto botPhotoMessage = new SendPhoto();
        botPhotoMessage.setChatId(sentChatId);
        botPhotoMessage.setPhoto(new InputFile(trainer.getImageUrl()));
        botPhotoMessage.setCaption(trainerInfo);

        try {
          execute(botPhotoMessage);
        } catch (TelegramApiException e) {
          log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–µ—Ä–µ :\n" + e.getMessage());
        }

      }
      else if (data.equals(__RATE_COACH_WORK_BUTTON)) {
        editedMessageText = "ü§© –°–∫–æ–ª—å–∫–æ –∑–≤–µ–∑–¥ —Ç—ã –ø–æ—Å—Ç–∞–≤–∏—à—å —Å–≤–æ–µ–º—É —Ç—Ä–µ–Ω–µ—Ä—É ?\n–ù–∞–∂–º–∏ –Ω–∞ " +
          "–∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥";

        changesCoachRating = true;

        sendEditedMessage(
          sentChatId,
          sentMessageId,
          editedMessageText,
          Optional.of(
            makeInlineKeyboardMarkup(
              List.of(
                "‚≠ê", "‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"
              ),
              List.of(
                __SET_COACH_RATING_ONE_STAR,
                __SET_COACH_RATING_TWO_STAR,
                __SET_COACH_RATING_THREE_STAR,
                __SET_COACH_RATING_FOUR_STAR,
                __SET_COACH_RATING_FIVE_STAR
              ),
              5
            )
          )
        );

      }
      else if (data.equals(__SET_COACH_RATING_ONE_STAR)){
        updateCoachRating("ü§ò –ú—ã –µ–≥–æ —É–≤–æ–ª–∏–º, –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å.",
          1.0);
        changesCoachRating = false;
      }
      else if (data.equals(__SET_COACH_RATING_TWO_STAR)){
        updateCoachRating("‚úçÔ∏è –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª, –ª–∏—á–Ω–æ —Å–¥–µ–ª–∞—é —Ç—Ä–µ–Ω–µ—Ä—É –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∫–∏—Ç–∞–π—Å–∫–æ–µ...",
          2.0);
        changesCoachRating = false;

      }
      else if (data.equals(__SET_COACH_RATING_THREE_STAR)){
        updateCoachRating("üò¨ –ü–æ–Ω—è–ª, —Å–∫–∞–∂—É –Ω–∞—á–∞–ª—å–Ω–∏–∫—É –∫–æ–Ω—Ç–æ—Ä—ã —á—Ç–æ–±—ã –ø–æ–≥–æ–≤–æ—Ä–∏–ª —Å –Ω–∏–º.",
          3.0);
        changesCoachRating = false;

      }
      else if (data.equals(__SET_COACH_RATING_FOUR_STAR)){
        updateCoachRating("üéâ –†–∞–¥ —á—Ç–æ –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∞—à–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ !", 4.0);
        changesCoachRating = false;

      }
      else if (data.equals(__SET_COACH_RATING_FIVE_STAR)){
        updateCoachRating("ü§© –í—ã–¥–∞–º –≤–∞—à–µ–º—É —Ç—Ä–µ–Ω–µ—Ä—É –≥–æ–¥–æ–≤—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–µ–º–∏–∏ !",
          5.0);
        changesCoachRating = false;

      }
    }

  }
<<<<<<< HEAD

  private Double getCoachRating(Double sumOfVotes, Integer numberOfVotes) {
    if (numberOfVotes == null || numberOfVotes == 0) {
      return 0.0;
    } else {
      return sumOfVotes / numberOfVotes;
    }
  }
  private void updateCoachRating(String messageText, Double newRating) {
    justSendMessage(
      sentChatId,
      messageText + "\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ : " + updateCoachRatingInTable(newRating).toString()
    );
  }
  private Double updateCoachRatingInTable(Double rating) {
    Double newRating;

    Trainer trainer =
      trainerRepository.findById(userRepository.findById(sentChatId).get().getTrainerId()).get();

    Double curSumOfVotes = trainer.getSumOfVotes();
    Integer curNumberOfVotes = trainer.getNumberOfVotes();
    if (curSumOfVotes == null) curSumOfVotes = 0.0;

    trainer.setSumOfVotes(curSumOfVotes += rating);
    trainer.setNumberOfVotes(++curNumberOfVotes);

    newRating = getCoachRating(trainer.getSumOfVotes(), trainer.getNumberOfVotes());

    trainerRepository.save(trainer);

    return newRating;
  }
  private void coach() {
=======
  private void sendTrainer(Long chatId, Long id) {
    Trainer trainer = trainerRepository.findById(id).get();
    SendPhoto sendPhoto = new SendPhoto();
    sendPhoto.setChatId(String.valueOf(chatId));
    sendPhoto.setPhoto(new InputFile(trainer.getPhotoPath()));
    sendPhoto.setCaption("–í–∞—à —Ç—Ä–µ–Ω–µ—Ä: " + trainer.getFirstName() + " " + trainer.getLastName());
    try {
      execute(sendPhoto);
    } catch (TelegramApiException e) {
      log.error("Error occurred : " + e.getMessage());
    }
  }
  private void justSendMessage(Long chatId, String text) {
>>>>>>> c0ac39f34d9131a637f10bde205b8212724af239
    SendMessage message = new SendMessage();
    message.setChatId(chatId);

    if (userRepository.findById(chatId).get().getTrainerId() == -1) {
      message.setReplyMarkup(
        makeInlineKeyboardMarkup(
          List.of(
            "–í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞"
          ),
          List.of(
            __COACHES_LIST_BUTTON
          ),
          1
        )
      );
      message.setText("üßô‚Äç‚ôÇÔ∏è –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ —Ç—Ä–µ–Ω–µ—Ä–∞, –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å " +
        "—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∞–º –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º !");
    } else {
      message.setReplyMarkup(
        makeInlineKeyboardMarkup(
          List.of(
            "–°–ø—Ä–∞–≤–∫–∞ –æ –º–æ–µ–º —Ç—Ä–µ–Ω–µ—Ä–µ",
            "–û—Ü–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞",
            "–°–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞"
          ),
          List.of(
            __COACH_INFO_BUTTON,
            __RATE_COACH_WORK_BUTTON,
            __CHANGE_COACH_BUTTON
          ),
          3
        )
      );
      message.setText("Ô∏èü§î –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∫—Ä—É—Ç–µ–π—à–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, —á–µ–≥–æ –∂–µ —Ç–µ–±–µ –µ—â–µ –Ω–∞–¥–æ ?");
    }
    sendMessage(message);
  }
  private InlineKeyboardMarkup makeInlineKeyboardMarkup(
    List<String> buttonsText,
    List<String> buttonsCallBack,
    int count
  )
  {
    InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();

    List< List< InlineKeyboardButton > > buttonsMatrix = new ArrayList<>();
    List< InlineKeyboardButton > buttonsRow = new ArrayList<>();
    InlineKeyboardButton button;

    for (int i = 0; i < count; ++i) {
      if (buttonsRow.size() >= 3) {
        buttonsMatrix.add(buttonsRow);
        buttonsRow = new ArrayList<>();
      }
      button = new InlineKeyboardButton();
      button.setText(buttonsText.get(i));
      button.setCallbackData(buttonsCallBack.get(i));
      buttonsRow.add(button);
    }
    buttonsMatrix.add(buttonsRow);

    keyboard.setKeyboard(buttonsMatrix);
    return keyboard;
  }

  // TODO –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
  private void schedule() {
  }

  // TODO –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤, —Å—á–∏—Ç—ã–≤–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–∫—Ä–µ–ø–∏—Ç—å
  //  –∑–∞ –Ω–∏–º —Ç—Ä–µ–Ω–µ—Ä–∞ —Å –æ–ø—Ä. –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
  private String getCoachesList() {
    String coachesList = "–ù–∞—à–∏ —Ç—Ä–µ–Ω–µ—Ä—ã :\n\n–¢—Ä–µ–Ω–µ—Ä—ã –∫ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç–º–µ—á–µ–Ω—ã " +
      "—Å–∏–º–≤–æ–ª–æ–º üü©, –∑–∞–Ω—è—Ç—ã–µ –æ—Ç–º–µ—á–µ–Ω—ã üü•" +
      "\n\n";
    List<Trainer> trainers = trainerRepository.findAll();
    Integer i = 0;
    for (var it : trainers) {
      coachesList = coachesList.concat(i.toString() + ". ");
      if (
        it.getFatherName().endsWith("–≤–Ω–∞")
      )
      {
        coachesList = coachesList.concat(" üßò‚Äç‚ôÄÔ∏è ");
      } else {
        coachesList = coachesList.concat(" ü§∫ ");
      }
      coachesList = coachesList.concat(it.getLastName() + " " + it.getFirstName() + " " + it.getFatherName() + " ü§© " +
         String.format("%.2f",
           getCoachRating(
             it.getSumOfVotes(),
             it.getNumberOfVotes()
           )
         ));

      if (it.getIsFree()) coachesList = coachesList.concat(" üü©\n\n");
      else coachesList = coachesList.concat(" üü•\n\n");
      i++;
    }
    return coachesList;

  }

  private void makeMenu() {
    listOfCommands = new ArrayList<BotCommand>();

    if (userStatus.equals(UserStatus.Unknown)) {
      listOfCommands.add(new BotCommand("/start", "üëâ –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º —á—Ç–æ–±—ã –æ–Ω " +
        "–æ–ø—Ä–µ–¥–µ–ª–∏–ª –≤–∞—à —Å—Ç–∞—Ç—É—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, –∏ –ø–æ–¥–æ–±—Ä–∞–ª –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–ª–µ–∑–Ω—ã–µ –¥–ª—è –≤–∞—Å –∫–æ–º–∞–Ω–¥—ã."));
    }
    if (userStatus.equals(UserStatus.PotentialClient)) {
      listOfCommands.add(new BotCommand("/register", "üí∏ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∑–∞–ª."));
    } else if (userStatus.equals(UserStatus.Client)) {
      listOfCommands.add(new BotCommand("/schedule", "üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"));
      listOfCommands.add(new BotCommand("/coach", "ü¶æ –¢—Ä–µ–Ω–µ—Ä"));
    } else if (userStatus.equals(UserStatus.Coach)) {
      listOfCommands.add(new BotCommand("/schedule", "üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π"));
      listOfCommands.add(new BotCommand("/clients", "üìÉ –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤"));
    }

    listOfCommands.add(new BotCommand("/help", "üÜò –ü–æ—è—Å–Ω–∏ –∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"));


  }

  private void justSendMessage(Long curChatId, String text) {
    SendMessage message = new SendMessage();
    message.setChatId(curChatId);
    message.setText(text);
    message.setParseMode("Markdown");
    sendMessage(message);
  }
  private void sendMessage(SendMessage message) {
    try {
      // –ú–µ—Ç–æ–¥ execute –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ => –µ–≥–æ –Ω—É–∂–Ω–æ
      // –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
      execute(message);
    } catch (TelegramApiException e) {
      // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Ç–æ–¥ - null.
      log.error("Error occurred : " + e.getMessage());
    }
  }

  private void startCommandReceived() {

    String answer;

    SendMessage message = new SendMessage();
    message.setChatId(chatId);

    if (userRepository.findById(chatId).isEmpty()) {
      answer = "ü§î –ù–æ–≤—ã–µ –ª–∏—Ü–∞ –≤ –Ω–∞—à–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏, —á—Ç–æ-—Ç–æ —è —Ç–µ–±—è –Ω–µ —É–∑–Ω–∞—é, –¥–∞–≤–∞–π —è " +
        "–æ—Ñ–æ—Ä–º–ª—é —Ç–µ–±–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤ –Ω–∞—à —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±, —Å–¥–µ–ª–∞—é –∏–∑ —Ç–µ–±—è –≥–∏–≥–∞—á–∞–¥–∞ !";

      message.setReplyMarkup(
        makeInlineKeyboardMarkup(
          List.of(
            "ü¶æ –û—Ñ–æ—Ä–º–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç",
            "üôÉ –Ø –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤"
          ),
          List.of(
            __REGISTER_CLIENT_BUTTON,
            __REJECT_SUBSCRIPTION_BUTTON
          ),
          2
        )
      );

    } else {
      answer = "ü´° –ó–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é " + curUserName + " !\n\n–Ø —Ç–µ–±—è —É–∑–Ω–∞–ª, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ " +
        "–ø–æ–º–æ–≥—É" +
        " " +
        "—Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ " +
        "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∏–ª–∏ –≤—ã–≤–µ–¥—É –¥–µ–π—Å—Ç–≤—É—é—â–µ–µ.";
<<<<<<< HEAD
      userStatus = UserStatus.Client;
      makeMenu();
      setMenu();
=======

      InlineKeyboardMarkup menu = new InlineKeyboardMarkup();
      List< List<InlineKeyboardButton> > buttonsMatrix =
              new ArrayList< List<InlineKeyboardButton> >();
      List< InlineKeyboardButton > buttonsRow = new ArrayList< InlineKeyboardButton >();

      var butDeleteSubscription = new InlineKeyboardButton();
      butDeleteSubscription.setText("–ü–µ—Ä–µ—Å—Ç–∞—Ç—å —Ö–æ–¥–∏—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏");
      butDeleteSubscription.setCallbackData(CALLBACK_DELETE_SUBSCRIPTION);

      buttonsRow.add(butDeleteSubscription);
      buttonsMatrix.add(buttonsRow);
      menu.setKeyboard(buttonsMatrix);
      message.setReplyMarkup(menu);
>>>>>>> c0ac39f34d9131a637f10bde205b8212724af239
    }

    message.setText(answer);
    sendMessage(message);

    log.info("Replied to user " + curUserName);
  }

<<<<<<< HEAD
  private void register() {
=======
  private void confirmSubscription(long chatId) {
>>>>>>> c0ac39f34d9131a637f10bde205b8212724af239
    // TODO –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º.
    SendMessage message = new SendMessage();
    message.setChatId(chatId);

    if (userRepository.findById(chatId).isEmpty()) {

      InlineKeyboardMarkup menu = new InlineKeyboardMarkup();
      List< List<InlineKeyboardButton> > buttonsMatrix = new ArrayList< List<InlineKeyboardButton> >();
      List< InlineKeyboardButton > buttonsRow = new ArrayList< InlineKeyboardButton >();

      message.setText("ü´µ –í –Ω–∞—à–µ–º —Ñ–∏—Ç–Ω–µ—Å –∫–ª—É–±–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π 3 –º–µ—Å—è—Ü–∞ " +
        "–±–µ—Å–ø–ª–∞—Ç–Ω–æ, –ø–æ—Ç–æ–º " +
        "10 000 —Ä—É–± " +
        "–≤ " +
        "–º–µ—Å—è—Ü," +
        " " +
        "–≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è ?");

<<<<<<< HEAD
      message.setReplyMarkup(
        makeInlineKeyboardMarkup(
          List.of("–î–∞ —è —Å–æ–≥–ª–∞—Å–µ–Ω !", "–ù–µ—Ç, —è –ø–æ–∫–∞ –¥—É–º–∞—é"),
          List.of(__APPLY_SUBSCRIPTION_BUTTON, __REJECT_SUBSCRIPTION_BUTTON),
          2
        )
      );

=======
      var but_yes = new InlineKeyboardButton();
      but_yes.setText("–î–∞");
      but_yes.setCallbackData(CALLBACK_YES);

      var but_no = new InlineKeyboardButton();
      but_no.setText("–ù–µ—Ç");
      but_no.setCallbackData(CALLBACK_NO);

      buttonsRow.add(but_no);
      buttonsRow.add(but_yes);

      buttonsMatrix.add(buttonsRow);
      menu.setKeyboard(buttonsMatrix);

      message.setReplyMarkup(menu);
>>>>>>> c0ac39f34d9131a637f10bde205b8212724af239
    } else {
      // –£–∑–Ω–∞—Ç—å –∫–∞–∫ –∏–∑–≤–ª–µ–∫–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–≤–µ—Ä–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ Query)
      message.setText("üíñ –í—ã —É–∂–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏ –æ–Ω –ø–æ–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç");
    }
    sendMessage(message);
  }


  private void registerUser(Message message) {
    var chatId = message.getChatId();
    var chat = message.getChat();


    User user = new User();
    user.setChatId(chatId);
    user.setLastName(chat.getLastName());
    user.setFirstName(chat.getFirstName());
    user.setTrainerId(trainerId);
    user.setStartSubscriptionDate(LocalDate.now());
    user.setEndSubscriptionDate(user.getStartSubscriptionDate().plusMonths(3));
    // –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–¥–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –±—Ä–∞—Ç—å.
    userRepository.save(user);
    // –û–ø–µ—Ä–∞—Ç–æ—Ä + -> –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ toString
    log.info("User saved" + user);
  }

<<<<<<< HEAD
  private void sendEditedMessage(
    Long chatId,
    Integer mesId,
    String text,
    Optional<InlineKeyboardMarkup> keyboard
  )
  {
    EditMessageText editedMessage = new EditMessageText();
    editedMessage.setChatId(chatId);
    editedMessage.setMessageId(mesId);
    editedMessage.setText(text);
    if (keyboard.isPresent()) {
      editedMessage.setReplyMarkup(keyboard.get());
    }
=======
  private void chooseUserSpecialization(Long chatId) {
    SendMessage message = new SendMessage();
    message.setChatId(chatId);

    InlineKeyboardMarkup menu = new InlineKeyboardMarkup();
    List< List<InlineKeyboardButton> > buttonsMatrix = new ArrayList< List<InlineKeyboardButton> >();
    List< InlineKeyboardButton > buttonsRow = new ArrayList< InlineKeyboardButton >();

    message.setText("üí™üèº –ß–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤ –Ω–∞—à–µ–º –∑–∞–ª–µ ?");

    var but_fitness = new InlineKeyboardButton();
    but_fitness.setText("ü§∏üèΩ –§–∏—Ç–Ω–µ—Å");
    but_fitness.setCallbackData(CALLBACK_FITNESS);

    var but_bodybuilding = new InlineKeyboardButton();
    but_bodybuilding.setText("üèãÔ∏è‚Äç‚ôÇÔ∏è –ë–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥");
    but_bodybuilding.setCallbackData(CALLBACK_BODYBUILDING);

    var but_yoga = new InlineKeyboardButton();
    but_yoga.setText("Ô∏èüßòüèΩ‚Äç‚ôÄÔ∏è –ô–æ–≥–∞");
    but_yoga.setCallbackData(CALLBACK_YOGA);

    buttonsRow.add(but_fitness);
    buttonsRow.add(but_bodybuilding);
    buttonsRow.add(but_yoga);

    buttonsMatrix.add(buttonsRow);
    menu.setKeyboard(buttonsMatrix);

    message.setReplyMarkup(menu);

    sendMessage(message);
  }
  private Long getSpecialTrainerId(String specialization) {
    List<Long> trainersId = new ArrayList<Long>();
    for (Trainer t : trainerRepository.findAll()) {
      if (t.getSpecialization().equals(specialization)) {
        trainersId.add(t.getTrainerId());
      }
    }
    int randomIndex = (int) (Math.random() * trainersId.size());
    return trainersId.get(randomIndex);
  }
  private void sendSchedule(Long chatId) {
    if (scheduleRepository.findById(chatId).isEmpty()) {
      generateSchedule(chatId);
    }
    Schedule schedule = scheduleRepository.findById(chatId).get();
    String[] trainingDays = schedule.getTrainingDays();
    String[] trainingTimes = schedule.getTrainingTimes();

    SendMessage message = new SendMessage();
    message.setChatId(chatId);
    String text = "–í–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤–∞—à–∏—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫:\n";
    for (int i = 0; i < trainingDays.length; i++) {
      String[] times = trainingTimes[i].split("-");
      text += trainingDays[i] + ": " + times[0] + " - " + times[1] + "\n";
    }
    message.setText(text);
    sendMessage(message);
  }
  private enum Days {
    –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, –í—Ç–æ—Ä–Ω–∏–∫, –°—Ä–µ–¥–∞, –ß–µ—Ç–≤–µ—Ä–≥, –ü—è—Ç–Ω–∏—Ü–∞
  }
  private void generateSchedule(Long chatId) {
    Schedule schedule = new Schedule();
    int daysNumber = Days.values().length;
    int trainingDaysCount = (int) (Math.random() * 2) + 2;
    String[] trainingDays = new String[trainingDaysCount];
    int[] randomDays = getUniqueRandomNumbers(trainingDaysCount);
    // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–Ω–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    for (int i = 0; i < trainingDaysCount; i++) {
      trainingDays[i] = String.valueOf(Days.values()[randomDays[i]]);
    }
    // –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–µ–º—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
    String[] trainingTimes = new String[trainingDaysCount];
    for (int i = 0; i < trainingDaysCount; i++) {
      int startTime = (int) (Math.random() * (20 - 8)) + 8;
      LocalTime[] time = new LocalTime[2];
      time[0] = LocalTime.of(startTime, 0);
      time[1] = LocalTime.of(startTime + 1, 30);
      trainingTimes[i] =  String.valueOf(time[0]) + "-" + String.valueOf(time[1]);
    }
    // —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule.setClientId(chatId);
    schedule.setTrainerId(trainerId);
    schedule.setTrainingDays(trainingDays);
    schedule.setTrainingTimes(trainingTimes);

    scheduleRepository.save(schedule);

    log.info("Schedule saved: " + schedule);
  }
  private int[] getUniqueRandomNumbers(int size) {
    int[] result = new int[size];
    Set<Integer> uniqueNumbers = new HashSet<>();
    while (uniqueNumbers.size() < size) {
      int randomNumber = (int) (Math.random() * size);
      uniqueNumbers.add(randomNumber);
    }
    int index = 0;
    for (int num : uniqueNumbers) {
      result[index++] = num;
    }
    return result;
  }
  private void callbackDataEditMes(long chatId, long mesId, String text) {
    EditMessageText mes = new EditMessageText();
    mes.setChatId(chatId);
    mes.setMessageId((int) mesId);
    mes.setText(text);
>>>>>>> c0ac39f34d9131a637f10bde205b8212724af239
    try {
      // –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      execute(editedMessage);
    } catch (TelegramApiException e) {
      log.error("Error occurred : " + e.getMessage());
    }
  }
  private void setMenu() {
    try {
      this.execute(
        new SetMyCommands(
          listOfCommands, new BotCommandScopeDefault(), null
        )
      );
    } catch (TelegramApiException e) {
      log.error("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ :\n" + e.getMessage());
    }
  }

}
