
package ru.stradiavanti.train_plan_bot.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.polls.SendPoll;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.polls.Poll;
import org.telegram.telegrambots.meta.api.objects.polls.PollAnswer;
import org.telegram.telegrambots.meta.api.objects.polls.PollOption;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.stradiavanti.train_plan_bot.config.BotConfig;
import ru.stradiavanti.train_plan_bot.model.Trainer;
import ru.stradiavanti.train_plan_bot.model.TrainerRepository;
import ru.stradiavanti.train_plan_bot.model.User;
import ru.stradiavanti.train_plan_bot.model.UserRepository;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.DayOfWeek;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.*;

@Component
@Slf4j
// TelegramLongPollingBot - –±–æ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–±
// –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.
// TelegramWebHookBot - –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ –º–æ–º–µ–Ω—Ç –∏—Ö
// –æ—Ç–ø—Ä–∞–≤–∫–∏. –ë–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω, –Ω–æ —Å–ª–æ–∂–Ω–µ–µ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.

/* TelegramLongPollingBot :: –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å, —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ
–º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å */
public class TelegramBot extends TelegramLongPollingBot {
  /* –°–≤–æ–π—Å—Ç–≤–∞ */
  // –û–±—ä—è–≤–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ BotConfig
  public enum UserStatus {
    Unknown, PotentialClient, Client
  }
  private final BotConfig config;
  /* –°–≤—è–∑–∞–Ω–Ω—ã–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö —Å–≤–æ–π—Å—Ç–≤–∞  */
  @Autowired
  // –í–∫–ª—é—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏ –≤–Ω–µ–¥—Ä—è–µ–º –µ–µ
  private UserRepository userRepository;
  @Autowired
  private TrainerRepository trainerRepository;
  private UserStatus userStatus;
  User curUser;
  /* –ß–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º */
  private Long chatId;
  private Integer mesId;
  
  private String curUserName;
  private List<BotCommand> listOfCommands = null;
  /* –°–æ–±—ã—Ç–∏—è */
  private final String __APPLY_SUBSCRIPTION_BUTTON = "__APPLY_SUBSCRIPTION_BUTTON";
  private final String __REJECT_SUBSCRIPTION_BUTTON = "__REJECT_SUBSCRIPTION_BUTTON";
  private final String __SELECT_COACH_BUTTON = "__SELECT_SELECT_COACH_BUTTON";
  private final String __REJECT_COACH_BUTTON = "__REJECT_COACH_BUTTON";
  private final String __COACHES_LIST_BUTTON = "__COACHES_LIST_BUTTON";
  private final String __REGISTER_CLIENT_BUTTON = "__REGISTER_CLIENT_BUTTON";
  private final String __COACH_INFO_BUTTON = "__COACH_INFO_BUTTON";
  private final String __RATE_COACH_WORK_BUTTON = "__RATE_COACH_WORK_BUTTON";
  private final String __CHANGE_COACH_BUTTON = "__CHANGE_COACH_BUTTON";
  private final String __SET_COACH_RATING_ONE_STAR = "__SET_COACH_RATING_ONE_STAR";
  private final String __SET_COACH_RATING_TWO_STAR = "__SET_COACH_RATING_TWO_STAR";
  private final String __SET_COACH_RATING_THREE_STAR = "__SET_COACH_RATING_THREE_STAR";
  private final String __SET_COACH_RATING_FOUR_STAR = "__SET_COACH_RATING_FOUR_STAR";
  private final String __SET_COACH_RATING_FIVE_STAR = "__SET_COACH_RATING_FIVE_STAR";
  private final String __SET_SCHEDULE = "__SET_SCHEDULE";
  private final String __GET_SCHEDULE = "__GET_SCHEDULE";

  // –§–ª–∞–≥–∏
  boolean choosingCoach;
  boolean changesCoachRating;
  boolean entersCommand;
  boolean settedSchedule;
  // ---
  private String helpText;



  public TelegramBot(BotConfig config) {
    super(config.getToken());
    this.config = config;
    choosingCoach = false;
    changesCoachRating = false;
    entersCommand = true;
    settedSchedule = false;

    listOfCommands = new ArrayList<>();

    curUser = null;
    userStatus = UserStatus.Unknown;
    // –†–µ–∞–ª–∏–∑—É–µ–º –º–µ–Ω—é
    makeMenu();

  }

  @Override
  public String getBotUsername() {
    return config.getBotName();
  }

  @Override
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è, –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –º—ã –¥–æ–ª–∂–Ω—ã –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.
  public void onUpdateReceived(Update update) {

    // TODO –ü–µ—Ä–µ–¥–µ–ª–∞—Ç—å –º–µ–Ω—é, –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–µ –ø—É–Ω–∫—Ç—ã : —Ç—Ä–µ–Ω–µ—Ä –∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ, –≥–¥–µ
    //  –º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞, –ø–æ–ª—É—á–∏—Ç—å –≤—Å—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏ —Ç.–ø.
    if (update.hasMessage() && update.getMessage().hasText()) {

      String userMessageText = update.getMessage().getText();
      curUserName = update.getMessage().getChat().getFirstName();
      // –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      chatId = update.getMessage().getChatId();

      if (entersCommand) {
        on_entersCommand(userMessageText);
      }
      else if (choosingCoach) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –§–ò–û —Ç—Ä–µ–Ω–µ—Ä–∞
        List<String> name = List.of(userMessageText.split(" "));
        SendMessage botMessage = new SendMessage();
        botMessage.setChatId(chatId);
        botMessage.setReplyToMessageId(update.getMessage().getMessageId());

        String botMessageText;
        if (name.size() != 3) {
          botMessageText = "üò≠ –í—ã –≤–≤–µ–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û !";
        } else {
          Optional<Trainer> trainer =
            trainerRepository.findByLastNameAndFirstNameAndFatherName(
            name.get(0),
            name.get(1),
            name.get(2)
          );
          if (trainer.isPresent()) {
            curUser = userRepository.findById(chatId).get();
            curUser.setTrainerId(trainer.get().getId());

            botMessageText =
              "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é " + name.get(0) + " " + name.get(1) + " " + name.get(2) +
              " - " +
              "–≤–∞—à –Ω–æ–≤—ã–π —Ç—Ä–µ–Ω–µ—Ä.";
            trainer.get().setIsFree(false);

            trainerRepository.save(trainer.get());
            userRepository.save(curUser);

          } else {
            botMessageText = "ü§î –•–º, –≤ –Ω–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –Ω–µ—Ç —Ç—Ä–µ–Ω–µ—Ä–∞ —Å —Ç–∞–∫–∏–º –§–ò–û.";
          }
        }
        botMessage.setText(botMessageText);
        sendMessage(botMessage);
        choosingCoach = false;
        changesCoachRating = false;
        entersCommand = true;
      }
      else if (changesCoachRating) {
        try {
          Double newRating = Double.parseDouble(userMessageText);
          on_updateCoachRatingButton("‚úçÔ∏è –û–±–Ω–æ–≤–ª—è—é —Ä–µ–π—Ç–∏–Ω–≥ —Ç—Ä–µ–Ω–µ—Ä–∞ ...", newRating);
        } catch (NumberFormatException e) {
          justSendMessage(
            chatId,
            "üò¨ –í—ã –≤–≤–µ–ª–∏ —Å—Ç—Ä–æ–∫—É –≤–º–µ—Å—Ç–æ —á–∏—Å–ª–∞ !",
            Optional.empty()
          );
        }
        choosingCoach = false;
        changesCoachRating = false;
        entersCommand = true;
      }
    // –ù–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.
    }
    else if (update.hasCallbackQuery()) {
      CallbackQuery callbackQuery = update.getCallbackQuery();

      Message sentMessage = callbackQuery.getMessage();
      String data = callbackQuery.getData();

      mesId = sentMessage.getMessageId();
      chatId = sentMessage.getChatId();

      curUserName = update.getCallbackQuery().getMessage().getChat().getFirstName();

      String editedMessageText;

      if (data.equals(__APPLY_SUBSCRIPTION_BUTTON)) {

        DateFormat dt = new SimpleDateFormat("dd.MM.yy");
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.MONTH, 3);

        registerUser(sentMessage);

        editedMessageText = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –Ω–∞—à —Ñ–∏—Ç–Ω–µ—Å –∫–ª—É–±, –≤–∞–º –≤—ã–¥–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π " +
          "–∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –¥–æ " + dt.format(cal.getTime());

        userStatus = UserStatus.Client;
        makeMenu();

        sendEditedMessage(chatId, mesId, editedMessageText, Optional.empty());

      }
      else if (data.equals(__REGISTER_CLIENT_BUTTON)) {
        on_registerCommand();

      }
      else if (data.equals(__REJECT_SUBSCRIPTION_BUTTON)) {
        editedMessageText = "ü§ë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—É–º–∞–π—Ç–µ –µ—â–µ —Ä–∞–∑, –æ—á–µ–Ω—å —Ö–æ—Ç–∏–º –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ.";
        sendEditedMessage(chatId, mesId, editedMessageText, Optional.empty());

      }
      else if (data.equals(__COACHES_LIST_BUTTON)) {
        editedMessageText = getCoachesList();

        sendEditedMessage(
          chatId,
          mesId,
          editedMessageText,
          Optional.of(
            makeInlineKeyboardMarkup(
              List.of(
                "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å—Å—è —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º",
                "–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ !"
              ),
              List.of(
                __SELECT_COACH_BUTTON,
                __REJECT_COACH_BUTTON
              ),
              2
            )
          )
        );
      }
      else if (data.equals(__SELECT_COACH_BUTTON)) {

        // –ë—É–¥–µ–º –∂–¥–∞—Ç—å –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
        justSendMessage(
          chatId,
          "‚úçÔ∏è –í–≤–µ–¥–∏ –§–ò–û —Ç—Ä–µ–Ω–µ—Ä–∞, –∏–∑ —Å–ø–∏—Å–∫–∞ –≤—ã—à–µ, –º–µ–∂–¥—É " +
          "—Å–ª–æ–≤–∞–º–∏ " +
          "—Å—Ç–∞–≤—å –ø—Ä–æ–±–µ–ª—ã, –Ω–µ –ø–∏—à–∏ –ª–∏—à–Ω–µ–≥–æ !",
          Optional.empty()
        );
        choosingCoach = true;
        changesCoachRating = false;
        entersCommand = false;


      }
      else if (data.equals(__REJECT_COACH_BUTTON)) {
        editedMessageText = "üò¨ –û—á–µ–Ω—å –∂–∞–ª—å, —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è —Ç–µ–±—è –º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω–∞–π–º–µ–º " +
          "–ê—Ä–Ω–æ–ª—å–¥–∞ –®–≤–∞—Ä—Ü–Ω–µ–≥–µ—Ä–∞.";

        sendEditedMessage(
          chatId,
          mesId,
          editedMessageText,
          Optional.empty()
        );
      }
      else if (data.equals(__CHANGE_COACH_BUTTON)) {
        User client = userRepository.findById(chatId).get();
        Trainer trainer = trainerRepository.findById(client.getTrainerId()).get();
        client.setTrainerId(-1L);
        trainer.setIsFree(true);

        userRepository.save(client);
        trainerRepository.save(trainer);

        editedMessageText = "üòé –¢–∞–∫—Å, —Ç–µ–ø–µ—Ä—å —Ç—ã –≥–æ–Ω—è–µ—à—å –±–µ–∑ —Ç—Ä–µ–Ω–µ—Ä–∞, –Ω–æ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç " +
          "–º–æ–∂–µ—à—å" +
          " " +
          "–≤—ã–±—Ä–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ.";

        sendEditedMessage(
          chatId,
          mesId,
          editedMessageText,
          Optional.of(
            makeInlineKeyboardMarkup(
              List.of("–í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞"),
              List.of(__COACHES_LIST_BUTTON),
              1
            )
          )
        );

      }
      else if (data.equals(__COACH_INFO_BUTTON)) {
        User client = userRepository.findById(chatId).get();
        Trainer trainer = trainerRepository.findById(client.getTrainerId()).get();

        String trainerInfo =
          "\n–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–≤–æ–µ–º —Ç—Ä–µ–Ω–µ—Ä–µ\n\n- –§–ò–û : " + trainer.getLastName() + " " + trainer.getFirstName() + " " + trainer.getFatherName() +
          "\n- –°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è : " + trainer.getSpecialization() +
          String.format("\n- –†–µ–π—Ç–∏–Ω–≥ : %.2f", trainer.getRating()
          );

        SendPhoto botPhotoMessage = new SendPhoto();
        botPhotoMessage.setChatId(chatId);
        botPhotoMessage.setPhoto(new InputFile(trainer.getImageUrl()));
        botPhotoMessage.setCaption(trainerInfo);

        try {
          execute(botPhotoMessage);
        } catch (TelegramApiException e) {
          log.error("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç—Ä–µ–Ω–µ—Ä–µ :\n" + e.getMessage());
        }

      }
      else if (data.equals(__RATE_COACH_WORK_BUTTON)) {
        editedMessageText = "ü§© –°–∫–æ–ª—å–∫–æ –∑–≤–µ–∑–¥ —Ç—ã –ø–æ—Å—Ç–∞–≤–∏—à—å —Å–≤–æ–µ–º—É —Ç—Ä–µ–Ω–µ—Ä—É ?\n–ù–∞–∂–º–∏ –Ω–∞ " +
          "–∫–Ω–æ–ø–∫—É –∏–ª–∏ –Ω–∞–ø–∏—à–∏ –¥—Ä–æ–±–Ω–æ–µ —á–∏—Å–ª–æ –∑–≤–µ–∑–¥";

        changesCoachRating = true;
        choosingCoach = false;
        entersCommand = false;

        sendEditedMessage(
          chatId,
          mesId,
          editedMessageText,
          Optional.of(
            makeInlineKeyboardMarkup(
              List.of(
                "‚≠ê", "‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê‚≠ê", "‚≠ê‚≠ê‚≠ê‚≠ê‚≠ê"
              ),
              List.of(
                __SET_COACH_RATING_ONE_STAR,
                __SET_COACH_RATING_TWO_STAR,
                __SET_COACH_RATING_THREE_STAR,
                __SET_COACH_RATING_FOUR_STAR,
                __SET_COACH_RATING_FIVE_STAR
              ),
              5
            )
          )
        );

      }
      else if (data.equals(__SET_COACH_RATING_ONE_STAR)){
        on_updateCoachRatingButton("ü§ò –ú—ã –µ–≥–æ —É–≤–æ–ª–∏–º, –Ω–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å.",
          1.0);
        changesCoachRating = false;
      }
      else if (data.equals(__SET_COACH_RATING_TWO_STAR)){
        on_updateCoachRatingButton("‚úçÔ∏è –ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª, –ª–∏—á–Ω–æ —Å–¥–µ–ª–∞—é —Ç—Ä–µ–Ω–µ—Ä—É –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∫–∏—Ç–∞–π—Å–∫–æ–µ...",
          2.0);
        changesCoachRating = false;

      }
      else if (data.equals(__SET_COACH_RATING_THREE_STAR)){
        on_updateCoachRatingButton("üò¨ –ü–æ–Ω—è–ª, —Å–∫–∞–∂—É –Ω–∞—á–∞–ª—å–Ω–∏–∫—É –∫–æ–Ω—Ç–æ—Ä—ã —á—Ç–æ–±—ã –ø–æ–≥–æ–≤–æ—Ä–∏–ª —Å –Ω–∏–º.",
          3.0);
        changesCoachRating = false;

      }
      else if (data.equals(__SET_COACH_RATING_FOUR_STAR)){
        on_updateCoachRatingButton("üéâ –†–∞–¥ —á—Ç–æ –≤—ã –æ—Ü–µ–Ω–∏–ª–∏ –Ω–∞—à–µ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ !", 4.0);
        changesCoachRating = false;

      }
      else if (data.equals(__SET_COACH_RATING_FIVE_STAR)){
        on_updateCoachRatingButton("ü§© –í—ã–¥–∞–º –≤–∞—à–µ–º—É —Ç—Ä–µ–Ω–µ—Ä—É –≥–æ–¥–æ–≤—É—é –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø—Ä–µ–º–∏–∏ !",
          5.0);
        changesCoachRating = false;

      }
      else if (data.equals(__SET_SCHEDULE)){
        SendPoll sendPoll = new SendPoll();
        sendPoll.setChatId(chatId);

        sendPoll.setIsAnonymous(false);
        sendPoll.setAllowMultipleAnswers(true);
        sendPoll.setQuestion("–í—ã–±–µ—Ä–∏—Ç–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏, –≤ –∫–æ—Ç–æ—Ä—ã–µ –∂–µ–ª–∞–µ—Ç–µ —Ö–æ–¥–∏—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏");

        List<String> options = new ArrayList<>();
        options.add("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫");
        options.add("–í—Ç–æ—Ä–Ω–∏–∫");
        options.add("–°—Ä–µ–¥–∞");
        options.add("–ß–µ—Ç–≤–µ—Ä–≥");
        options.add("–ü—è—Ç–Ω–∏—Ü–∞");

        sendPoll.setOptions(options);

        try {
          execute(sendPoll).getPoll();
        }
        catch (TelegramApiException e) {
          log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–ø—Ä–æ—Å–∞\n" + e.getMessage());
        }

      }
      else if (data.equals(__GET_SCHEDULE)) {
        if (settedSchedule) {
          editedMessageText = "‚úçÔ∏è –í–∞—à–µ —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ :\n\n";

          curUser = userRepository.findById(chatId).get();
          LocalDate currentDate = LocalDate.now();
          DayOfWeek currentDayOfWeek = currentDate.getDayOfWeek();

          LocalDate nearestDate;
          int daysUntill;

          if (curUser.getMonday()) {
            daysUntill = DayOfWeek.MONDAY.getValue() - currentDayOfWeek.getValue();
            if (daysUntill <= 0) daysUntill += 7;
            editedMessageText =
              editedMessageText.concat("1. –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ " + currentDate.plusDays(daysUntill).toString() +
                "\n");
          }
          if (curUser.getTuesday()) {
            daysUntill = DayOfWeek.TUESDAY.getValue() - currentDayOfWeek.getValue();
            if (daysUntill <= 0) daysUntill += 7;
            editedMessageText =
              editedMessageText.concat("2. –í—Ç–æ—Ä–Ω–∏–∫ " + currentDate.plusDays(daysUntill).toString() +
                "\n");
          }
          if (curUser.getWednesday()) {
            daysUntill = DayOfWeek.WEDNESDAY.getValue() - currentDayOfWeek.getValue();
            if (daysUntill <= 0) daysUntill += 7;
            editedMessageText =
              editedMessageText.concat("3. –°—Ä–µ–¥–∞ " + currentDate.plusDays(daysUntill).toString() +
                "\n");
          }
          if (curUser.getThursday()) {
            daysUntill = DayOfWeek.THURSDAY.getValue() - currentDayOfWeek.getValue();
            if (daysUntill <= 0) daysUntill += 7;
            editedMessageText =
              editedMessageText.concat("4. –ß–µ—Ç–≤–µ—Ä–≥ " + currentDate.plusDays(daysUntill).toString() +
                "\n");
          }
          if (curUser.getFriday()) {
            daysUntill = DayOfWeek.FRIDAY.getValue() - currentDayOfWeek.getValue();
            if (daysUntill <= 0) daysUntill += 7;
            editedMessageText =
              editedMessageText.concat("5. –ü—è—Ç–Ω–∏—Ü–∞ " + currentDate.plusDays(daysUntill).toString() +
                "\n");
          }
        } else {
          editedMessageText = "üò¨ –í–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ, " +
            "—Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –≤–∞–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –µ–≥–æ –∫–∞–∫ –º–æ–∂–Ω–æ —Å–∫–æ—Ä–µ–µ, –¥–ª—è —ç—Ç–æ–≥–æ " +
            "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–æ–π /schedule";
        }

        sendEditedMessage(
          chatId,
          mesId,
          editedMessageText,
          Optional.empty()
        );

      }
    }
    else if (update.hasPollAnswer()) {
      chatId = update.getPollAnswer().getUser().getId();

      User client = userRepository.findById(chatId).get();

      for (var it : update.getPollAnswer().getOptionIds()) {
        switch (it) {
          case 0 :
            client.setMonday(true);
            break;
          case 1:
            client.setTuesday(true);
            break;
          case 2:
            client.setWednesday(true);
            break;
          case 3:
            client.setThursday(true);
            break;
          case 4:
            client.setFriday(true);
            break;
        }
      }

      userRepository.save(client);

      if (!settedSchedule) settedSchedule = true;

      justSendMessage(chatId,
        "üéâ –ù–æ–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ",
        Optional.empty()
        );
    }
  }

  /* –°–ª—É–∂–µ–±–Ω—ã–µ –º–µ—Ç–æ–¥—ã */
  private InlineKeyboardMarkup makeInlineKeyboardMarkup(
    List<String> buttonsText,
    List<String> buttonsCallBack,
    int count
  )
  {
    InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();

    List< List< InlineKeyboardButton > > buttonsMatrix = new ArrayList<>();
    List< InlineKeyboardButton > buttonsRow = new ArrayList<>();
    InlineKeyboardButton button;

    for (int i = 0; i < count; ++i) {
      if (buttonsRow.size() >= 3) {
        buttonsMatrix.add(buttonsRow);
        buttonsRow = new ArrayList<>();
      }
      button = new InlineKeyboardButton();
      button.setText(buttonsText.get(i));
      button.setCallbackData(buttonsCallBack.get(i));
      buttonsRow.add(button);
    }
    buttonsMatrix.add(buttonsRow);

    keyboard.setKeyboard(buttonsMatrix);
    return keyboard;
  }

  private void on_entersCommand(String userMessageText) {
    if (userMessageText.equals("/start")) {
      on_startCommandReceived();
    }
    else if (userMessageText.equals("/register") && userStatus.equals(UserStatus.PotentialClient)) {
      on_registerCommand();
    }
    else if (userMessageText.equals("/coach") && userStatus.equals(UserStatus.Client)) {
      on_coachCommand();
    }
    else if (userMessageText.equals("/schedule") && userStatus.equals(UserStatus.Client)) {
      on_scheduleCommand();
    }
    else if (userMessageText.equals("/help")) {
      justSendMessage(
        chatId,
        helpText,
        Optional.empty()
      );
      log.info("–û—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + curUserName + " –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help.");
    }
    else {
      justSendMessage(
        chatId,
        "üò¨ –í –º–µ–Ω—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã –ù–ï–¢.",
        Optional.empty()
      );
    }
  }
  private void on_startCommandReceived() {

    String answer;

    SendMessage message = new SendMessage();
    message.setChatId(chatId);

    if (userRepository.findById(chatId).isEmpty()) {
      answer = "ü§î –ù–æ–≤—ã–µ –ª–∏—Ü–∞ –≤ –Ω–∞—à–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏, —á—Ç–æ-—Ç–æ —è —Ç–µ–±—è –Ω–µ —É–∑–Ω–∞—é, –¥–∞–≤–∞–π —è " +
        "–æ—Ñ–æ—Ä–º–ª—é —Ç–µ–±–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤ –Ω–∞—à —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±, —Å–¥–µ–ª–∞—é –∏–∑ —Ç–µ–±—è –≥–∏–≥–∞—á–∞–¥–∞ !";

      message.setReplyMarkup(
        makeInlineKeyboardMarkup(
          List.of(
            "ü¶æ –û—Ñ–æ—Ä–º–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç",
            "üôÉ –Ø –ø–æ–∫–∞ –Ω–µ –≥–æ—Ç–æ–≤"
          ),
          List.of(
            __REGISTER_CLIENT_BUTTON,
            __REJECT_SUBSCRIPTION_BUTTON
          ),
          2
        )
      );
      userStatus = UserStatus.PotentialClient;
      makeMenu();
    }
    else {
      answer = "ü´° –ó–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é " + curUserName + " !\n\n–Ø —Ç–µ–±—è —É–∑–Ω–∞–ª, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ " +
        "–ø–æ–º–æ–≥—É" +
        " " +
        "—Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ " +
        "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∏–ª–∏ –≤—ã–≤–µ–¥—É –¥–µ–π—Å—Ç–≤—É—é—â–µ–µ.";
      userStatus = UserStatus.Client;
      makeMenu();
    }

    message.setText(answer);
    sendMessage(message);

    log.info("–û—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + curUserName + " –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start.");
  }
  private void registerUser(Message message) {
    var chatId = message.getChatId();
    var chat = message.getChat();

    User user = new User(
      chatId, -1L, 0.0, chat.getFirstName(), chat.getLastName(),
      LocalDate.now(), LocalDate.now().plusMonths(3),
      0.0,
      false, false, false, false, false

    );

    // –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–¥–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –±—Ä–∞—Ç—å.
    userRepository.save(user);
    userStatus = UserStatus.Client;
    makeMenu();
    // –û–ø–µ—Ä–∞—Ç–æ—Ä + -> –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ toString
    log.info("User saved" + user);
  }

  private void on_registerCommand() {
    // TODO –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º.
    SendMessage message = new SendMessage();
    message.setChatId(chatId);

    if (userRepository.findById(chatId).isEmpty()) {
      message.setText("ü´µ –í –Ω–∞—à–µ–º —Ñ–∏—Ç–Ω–µ—Å –∫–ª—É–±–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π 3 –º–µ—Å—è—Ü–∞ " +
        "–±–µ—Å–ø–ª–∞—Ç–Ω–æ, –ø–æ—Ç–æ–º " +
        "10_000 —Ä—É–± " +
        "–≤ " +
        "–º–µ—Å—è—Ü," +
        " " +
        "–≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è ?");

      message.setReplyMarkup(
        makeInlineKeyboardMarkup(
          List.of("–î–∞ —è —Å–æ–≥–ª–∞—Å–µ–Ω !", "–ù–µ—Ç, —è –ø–æ–∫–∞ –¥—É–º–∞—é"),
          List.of(__APPLY_SUBSCRIPTION_BUTTON, __REJECT_SUBSCRIPTION_BUTTON),
          2
        )
      );

    }
    else {
      // –£–∑–Ω–∞—Ç—å –∫–∞–∫ –∏–∑–≤–ª–µ–∫–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–≤–µ—Ä–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ Query)
      message.setText("üíñ –í—ã —É–∂–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏ –æ–Ω –ø–æ–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç");
    }

    sendMessage(message);
    log.info("–û—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + curUserName + "–Ω–∞ –∫–æ–º–∞–Ω–¥—É /register.");
  }

  /* –í—Å–µ —á—Ç–æ —Å–≤—è–∑–∞–Ω–Ω–æ —Å —Ç—Ä–µ–Ω–µ—Ä–æ–º */
  private Double updateCoachRatingInTable() {
    // –≠—Ç—É –∫–æ–º–∞–Ω–¥—É –º–æ–∂–Ω–æ –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ —Ç—Ä–µ–Ω–µ—Ä–∞.
    Trainer trainer =
      trainerRepository.findById(curUser.getTrainerId()).get();

    List<User> users = userRepository.findAll();

    Double sumOfVotes = 0.0;
    Integer numOfVotes = 0;
    Double rating;

    for (var it : users) {
      if (Objects.equals(it.getTrainerId(), trainer.getId())) {
        sumOfVotes += it.getTrainerRaiting(); numOfVotes++;
      }
    }

    if (numOfVotes == 0) {
      rating = 0.0;
    }
    else {
      rating = sumOfVotes/numOfVotes;
    }

    trainer.setRating(rating);
    trainerRepository.save(trainer);

    return rating;
  }
  private void on_updateCoachRatingButton(String messageText, Double newRating) {

    curUser = userRepository.findById(chatId).get();
    curUser.setTrainerRaiting(newRating);
    userRepository.save(curUser);

    justSendMessage(
      chatId,
      messageText + "\n–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ä–µ–π—Ç–∏–Ω–≥ : " + updateCoachRatingInTable().toString(),
      Optional.empty()
    );

  }
  private void on_coachCommand() {
    SendMessage botMessage = new SendMessage();
    botMessage.setChatId(chatId);

    if
    (
        userRepository.findById(chatId).get().getTrainerId() == -1
    )
    {
      botMessage.setReplyMarkup(
        makeInlineKeyboardMarkup(
          List.of(
            "–í—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞"
          ),
          List.of(
            __COACHES_LIST_BUTTON
          ),
          1
        )
      );
      botMessage.setText("üßô‚Äç‚ôÇÔ∏è –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ —Ç—Ä–µ–Ω–µ—Ä–∞, –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å " +
        "—Å–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–æ, —Ä–µ–∫–æ–º–µ–Ω–¥—É—é –≤–∞–º –≤—ã–±—Ä–∞—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞ —Å —Å–∞–º—ã–º –≤—ã—Å–æ–∫–∏–º —Ä–µ–π—Ç–∏–Ω–≥–æ–º !");
    }
    else {
      botMessage.setReplyMarkup(
        makeInlineKeyboardMarkup(
          List.of(
            "–°–ø—Ä–∞–≤–∫–∞ –æ –º–æ–µ–º —Ç—Ä–µ–Ω–µ—Ä–µ",
            "–û—Ü–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞",
            "–°–º–µ–Ω–∏—Ç—å —Ç—Ä–µ–Ω–µ—Ä–∞"
          ),
          List.of(
            __COACH_INFO_BUTTON,
            __RATE_COACH_WORK_BUTTON,
            __CHANGE_COACH_BUTTON
          ),
          3
        )
      );

      botMessage.setText("Ô∏èü§î –£ —Ç–µ–±—è —É–∂–µ –µ—Å—Ç—å –∫—Ä—É—Ç–µ–π—à–∏–π –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫, —á–µ–≥–æ –∂–µ —Ç–µ–±–µ –µ—â–µ –Ω–∞–¥–æ ?");
      log.info("–û—Ç–≤–µ—Ç–∏–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é " + curUserName + " –Ω–∞ –∫–æ–º–∞–Ω–¥—É /coach.");
    }
    sendMessage(botMessage);
  }
  // TODO –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
  private void on_scheduleCommand() {
    justSendMessage(
      chatId,
      "–ß—Ç–æ –≤—ã –∂–µ–ª–∞–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å ?",
      Optional.of(

        makeInlineKeyboardMarkup(
          List.of(
            "üóìÔ∏è –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ",
            "üß± –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ"
          ),
          List.of(
            __GET_SCHEDULE,
            __SET_SCHEDULE
          ),
          2
        )

      )
    );

  }

  // TODO –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–µ—Ä–æ–≤, —Å—á–∏—Ç—ã–≤–∞—Ç—å –≤—ã–±–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∑–∞–∫—Ä–µ–ø–∏—Ç—å
  //  –∑–∞ –Ω–∏–º —Ç—Ä–µ–Ω–µ—Ä–∞ —Å –æ–ø—Ä. –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º
  private String getCoachesList() {
    String coachesList = "–ù–∞—à–∏ —Ç—Ä–µ–Ω–µ—Ä—ã :\n\n–¢—Ä–µ–Ω–µ—Ä—ã –∫ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç–º–µ—á–µ–Ω—ã " +
      "—Å–∏–º–≤–æ–ª–æ–º üü©, –∑–∞–Ω—è—Ç—ã–µ –æ—Ç–º–µ—á–µ–Ω—ã üü•" +
      "\n\n";
    List<Trainer> trainers = trainerRepository.findAll();
    Integer i = 0;
    for (var it : trainers) {
      coachesList = coachesList.concat(i.toString() + ". ");
      if (
        it.getFatherName().endsWith("–≤–Ω–∞")
      )
      {
        coachesList = coachesList.concat(" üßò‚Äç‚ôÄÔ∏è ");
      } else {
        coachesList = coachesList.concat(" ü§∫ ");
      }
      coachesList = coachesList.concat(it.getLastName() + " " + it.getFirstName() + " " + it.getFatherName() + " ü§© " +
         String.format("%.2f",
           it.getRating()
         ));

      if (it.getIsFree()) coachesList = coachesList.concat(" üü©\n\n");
      else coachesList = coachesList.concat(" üü•\n\n");
      i++;
    }
    return coachesList;

  }

  /* –í—Å–µ —á—Ç–æ —Å–≤—è–∑–∞–Ω–æ —Å –º–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */
  private void setMenu() {
    try {
      this.execute(
        new SetMyCommands(
          listOfCommands, new BotCommandScopeDefault(), null
        )
      );
    } catch (TelegramApiException e) {
      log.error("–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥ :\n" + e.getMessage());
    }
  }

  private void makeMenu() {
    listOfCommands.clear();

    if (userStatus.equals(UserStatus.Unknown)) {
      listOfCommands.add(new BotCommand("/start", "üëâ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥") );
      helpText = "–ë–æ—Ç –¥–æ–∂–µ–Ω –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –≤–∞—à —Å—Ç–∞—Ç—É—Å –≤ —Å–∏—Å—Ç–µ–º–µ —á—Ç–æ–±—ã —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å " +
        "—Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥." +
        "\n\n/start -> –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º.";
    }
    if (userStatus.equals(UserStatus.PotentialClient)) {
      listOfCommands.add(new BotCommand("/register", "üí∏ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∑–∞–ª."));
      helpText = "–ü–æ—Å–∫–æ–ª—å–∫—É –≤—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∫–ª–∏–µ–Ω—Ç–æ–º, —Ç–æ –≤–∞–º –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ " +
        "–∫–æ–º–∞–Ω–¥–∞:" +
        "\n\n/register -> —Å—Ç–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–º –Ω–∞—à–µ–≥–æ —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±–∞.";
    }
    else if (userStatus.equals(UserStatus.Client)) {
      listOfCommands.add(new BotCommand("/schedule", "üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫"));
      listOfCommands.add(new BotCommand("/coach", "ü¶æ –¢—Ä–µ–Ω–µ—Ä"));
      helpText = "–í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã :\n\n/schedule -> –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é" +
        " –æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –∏–ª–∏ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ;" +
        "\n/coach -> –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–µ–º —Ç—Ä–µ–Ω–µ—Ä–µ –∏–ª–∏ –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –¥—Ä—É–≥–æ–º—É.";
    }

    listOfCommands.add(new BotCommand("/help", "‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã" +
      "."));

    setMenu();

  }
  /* –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π */
  private void justSendMessage(Long curChatId, String text,
                               Optional<InlineKeyboardMarkup> keyboard) {
    SendMessage message = new SendMessage();
    message.setChatId(curChatId);
    message.setText(text);
    message.setParseMode("Markdown");

    if (keyboard.isPresent()) {
      message.setReplyMarkup(keyboard.get());
    }

    sendMessage(message);
  }
  private void sendMessage(SendMessage message) {
    try {
      // –ú–µ—Ç–æ–¥ execute –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ => –µ–≥–æ –Ω—É–∂–Ω–æ
      // –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
      execute(message);
    } catch (TelegramApiException e) {
      // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Ç–æ–¥ - null.
      log.error("Error occurred : " + e.getMessage());
    }
  }
  private void sendEditedMessage(
    Long chatId,
    Integer mesId,
    String text,
    Optional<InlineKeyboardMarkup> keyboard
  )
  {
    EditMessageText editedMessage = new EditMessageText();
    editedMessage.setChatId(chatId);
    editedMessage.setMessageId(mesId);
    editedMessage.setText(text);
    if (keyboard.isPresent()) {
      editedMessage.setReplyMarkup(keyboard.get());
    }
    try {
      // –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      execute(editedMessage);
    } catch (TelegramApiException e) {
      log.error("Error occurred : " + e.getMessage());
    }
  }

  /* –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏–π */





}

