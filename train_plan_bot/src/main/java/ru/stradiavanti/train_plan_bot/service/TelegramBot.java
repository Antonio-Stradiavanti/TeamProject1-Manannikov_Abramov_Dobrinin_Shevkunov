package ru.stradiavanti.train_plan_bot.service;

import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.commands.SetMyCommands;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.commands.BotCommand;
import org.telegram.telegrambots.meta.api.objects.commands.scope.BotCommandScopeDefault;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.ReplyKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.KeyboardRow;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import ru.stradiavanti.train_plan_bot.config.BotConfig;
import ru.stradiavanti.train_plan_bot.model.Trainer;
import ru.stradiavanti.train_plan_bot.model.TrainerRepository;
import ru.stradiavanti.train_plan_bot.model.User;
import ru.stradiavanti.train_plan_bot.model.UserRepository;

import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;

@Component
@Slf4j
// TelegramLongPollingBot - –±–æ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ —Å–µ—Ä–≤–µ—Ä—É –∑–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–±
// –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.
// TelegramWebHookBot - –±–æ—Ç –ø–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –≤ –º–æ–º–µ–Ω—Ç –∏—Ö
// –æ—Ç–ø—Ä–∞–≤–∫–∏. –ë–æ–ª–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–µ–Ω, –Ω–æ —Å–ª–æ–∂–Ω–µ–µ –≤ —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏.

/* TelegramLongPollingBot :: –ê–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –∫–ª–∞—Å—Å, —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã - –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–µ
–º–µ—Ç–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å */
public class TelegramBot extends TelegramLongPollingBot {
  /* –°–≤–æ–π—Å—Ç–≤–∞ */
  // –û–±—ä—è–≤–ª—è–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–ª–∞—Å—Å–∞ BotConfig
  @Autowired
  // –í–∫–ª—é—á–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –∏ –≤–Ω–µ–¥—Ä—è–µ–º –µ–µ
  private UserRepository userRepository;
  @Autowired
  private TrainerRepository trainerRepository;
  private final BotConfig config;

  private final String CALLBACK_YES = "__YES";
  private final String CALLBACK_NO = "__NO";
  private final String CALLBACK_SET_SUBSCRIPTION = "__SET_SUBSCRIPTION";
  private final String CALLBACK_DELETE_SUBSCRIPTION = "__DELETE_SUBSCRIPTION";
  private final String CALLBACK_FITNESS = "__FITNESS";
  private final String CALLBACK_BODYBUILDING = "__BODYBUILDING";
  private final String CALLBACK_YOGA = "__YOGA";

  private final String HELP_TEXT = "\n***\n\n–ú–æ–∏ —Ñ-—Ü–∏–∏ :\n" +
    "- –°–æ—Å—Ç–∞–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ /getschedule" +
    "—Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫\n- –ó–∞–ø–∏—Å–∞—Ç—å –∫ —Ç—Ä–µ–Ω–µ—Ä—É : /setcoach\n- –û—Ç—Å—ã–ª–∞—Ç—å —Ç–µ–±–µ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ–∫–∞ —Ç—ã –Ω–µ" +
    " –Ω–∞—á–Ω–µ—à—å —Ä–µ–≥—É–ª—è—Ä–Ω–æ" +
    "—Ö–æ–¥–∏—Ç—å –Ω–∞" +
    " —Ç—Ä–µ–Ω–∏ (–∏–ª–∏ –Ω–µ –¥–æ–±–∞–≤–∏—à—å –º–µ–Ω—è –≤ —á–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫).\n\n***";

  private Long trainerId;

  /* –ú–µ—Ç–æ–¥—ã */
  public TelegramBot(BotConfig config) {
    super(config.getToken());
    this.config = config;

    // –†–µ–∞–ª–∏–∑—É–µ–º –º–µ–Ω—é
    List<BotCommand> listofCommands = new ArrayList<BotCommand>();

    listofCommands.add(new BotCommand("/start", "üëâ –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥"));
    listofCommands.add(new BotCommand("/register", "üí∏ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –≤ –∑–∞–ª."));
    listofCommands.add(new BotCommand("/get_subscriptions", "ü§ëÔ∏è –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ " +
      "–º–Ω–µ" +
      "–∞–±–æ–Ω–µ–º–µ–Ω—Ç—ã"));
    listofCommands.add(new BotCommand("/getschedule", "üóìÔ∏è –í—ã–≤–µ–¥–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"));
    listofCommands.add(new BotCommand("/setcoach", "ü¶æ –ó–∞–ø–∏—à–∏ –∫ —Ç—Ä–µ–Ω–µ—Ä—É"));

    listofCommands.add(new BotCommand("/help", "üÜò –ü–æ—è—Å–Ω–∏ –∑–∞ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª"));
    listofCommands.add(new BotCommand("/settings", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π —Å–≤–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ"));

    try {

      this.execute(
        new SetMyCommands(
          listofCommands, new BotCommandScopeDefault(), null
        )
      );

    } catch (TelegramApiException e) {

      log.error("Error setting bot's command list: " + e.getMessage());

    }

  }

  @Override
  public String getBotUsername() {
    return config.getBotName();
  }

  @Override
  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏—è, –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä—ã–π –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ–º
  // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ, –º—ã –¥–æ–ª–∂–Ω—ã –Ω–∞ –Ω–µ–≥–æ –æ—Ç–≤–µ—Ç–∏—Ç—å.
  public void onUpdateReceived(Update update) {


    if (update.hasMessage() && update.getMessage().hasText()) {

      String mesText = update.getMessage().getText();
      String name = update.getMessage().getChat().getFirstName();
      // –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∑–Ω–∞—Ç—å –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      Long chatId = update.getMessage().getChatId();

      switch (mesText) {
        case "/start":
          //registerUser(update.getMessage());
          startCommandReceived(chatId, name);

          break;
        case "/register":
          // –í—ã–Ω–æ—Å–∏–º –≤—Å–µ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã
          register(chatId);
          break;
        case "/help":
          // –í—ã–≤–æ–¥–∏–º —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥.
          justSendMessage(chatId, HELP_TEXT);
          log.info("Replied to user " + name);

          break;
        default:
          justSendMessage(chatId, "üò¨ –Ø –Ω–µ –∑–Ω–∞—é —á—Ç–æ –¥–µ–ª–∞—Ç—å, —Ç–∞–∫–∞—è –∫–æ–º–∞–Ω–¥–∞ –≤ –º–µ–Ω—è –Ω–µ " +
          "–∑–∞–ª–æ–∂–µ–Ω–∞");
      }
    // –í–º–µ—Å—Ç–æ —Ç–µ–∫—Å—Ç–∞ –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É.
    } else if (update.hasCallbackQuery()) {
      // –ù–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∞ –æ—Ç–¥–µ–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–æ–±—ã—Ç–∏–µ, –Ω–∞–∂–∞–ª–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É,
      // –µ—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∞ –∫ —Å–æ–æ–±—â–µ–Ω–∏—é, –æ—Ç–ø—Ä. –±–æ—Ç–æ–º —Ç–æ –±—É–¥–µ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å
      // –ø–æ–ª–µ message.
      String callbackData = update.getCallbackQuery().getData();
      long mesId = update.getCallbackQuery().getMessage().getMessageId();
      long chatId = update.getCallbackQuery().getMessage().getChatId();

      String text;

      if (callbackData.equals(CALLBACK_YES)) {

        DateFormat dt = new SimpleDateFormat("dd.MM.yy");
        Calendar cal = Calendar.getInstance();
        cal.add(Calendar.MONTH, 3);

        registerUser(update.getCallbackQuery().getMessage());

        text = "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –≤ –Ω–∞—à –∫–ª—É–±, –≤–∞–º –≤—ã–¥–∞–Ω –±–µ—Å–ø–ª–∞—Ç–Ω—ã–π " +
          "–∞–±–æ–Ω–µ–º–µ–Ω—Ç –Ω–∞ 3 –º–µ—Å—è—Ü–∞ –¥–æ " + dt.format(cal.getTime());
        callbackDataEditMes(chatId, mesId, text);
        sendTrainer(chatId, trainerId);

      } else if (callbackData.equals(CALLBACK_SET_SUBSCRIPTION)) {
        // –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫
        chooseUserSpecialization(chatId);

      } else if (callbackData.equals(CALLBACK_NO)) {
        text = "ü§ë –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥—É–º–∞–π—Ç–µ –µ—â–µ —Ä–∞–∑, –æ—á–µ–Ω—å —Ö–æ—Ç–∏–º –≤–∞—Å –≤–∏–¥–µ—Ç—å –≤ –Ω–∞—à–µ–º –∫–ª—É–±–µ.";
        callbackDataEditMes(chatId, mesId, text);

      } else if (callbackData.equals(CALLBACK_DELETE_SUBSCRIPTION)) {
        text = "–î–æ —Å–≤–∏–¥–∞–Ω–∏—è, –Ω–∞–¥–µ—é—Å—å –º—ã –µ—â–µ —É–≤–∏–¥–∏–º—Å—è —Å–Ω–æ–≤–∞";
        callbackDataEditMes(chatId, mesId, text);
        userRepository.deleteById(chatId);

      } else if (callbackData.equals(CALLBACK_FITNESS)) {
        trainerId = getSpecialTrainerId("–§–∏—Ç–Ω–µ—Å");
        register(chatId);

      } else if (callbackData.equals(CALLBACK_BODYBUILDING)) {
        trainerId = getSpecialTrainerId("–ë–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥");
        register(chatId);

      } else if (callbackData.equals(CALLBACK_YOGA)) {
        trainerId = getSpecialTrainerId("–ô–æ–≥–∞");
        register(chatId);

      }

    }

  }
  private void sendTrainer(Long chatId, Long id) {
    Trainer trainer = trainerRepository.findById(id).get();
    SendPhoto sendPhoto = new SendPhoto();
    sendPhoto.setChatId(String.valueOf(chatId));
    sendPhoto.setPhoto(new InputFile(trainer.getPhotoPath()));
    sendPhoto.setCaption("–í–∞—à —Ç—Ä–µ–Ω–µ—Ä: " + trainer.getFirstName() + " " + trainer.getLastName());
    try {
      execute(sendPhoto);
    } catch (TelegramApiException e) {
      log.error("Error occurred : " + e.getMessage());
    }
  }
  private void justSendMessage(Long chatId, String text) {
    SendMessage message = new SendMessage();
    message.setChatId(chatId);
    message.setText(text);
    sendMessage(message);

  }
  private void sendMessage(SendMessage message) {
    try {
      // –ú–µ—Ç–æ–¥ execute –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –Ω–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ => –µ–≥–æ –Ω—É–∂–Ω–æ
      // –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å
      execute(message);
    } catch (TelegramApiException e) {
      // –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∞ –Ω–∞ –º–µ—Ç–æ–¥ - null.
      log.error("Error occurred : " + e.getMessage());
    }
  }

  private void startCommandReceived(long chatId, String name) {
    String answer;

    SendMessage message = new SendMessage();
    message.setChatId(chatId);

    if (userRepository.findById(chatId).isEmpty()) {
      answer = "ü§î –ù–æ–≤—ã–µ –ª–∏—Ü–∞ –≤ –Ω–∞—à–µ–º –∑–∞–≤–µ–¥–µ–Ω–∏–∏, —á—Ç–æ-—Ç–æ —è —Ç–µ–±—è –Ω–µ —É–∑–Ω–∞—é, –¥–∞–≤–∞–π —è " +
        "–æ—Ñ–æ—Ä–º–ª—é —Ç–µ–±–µ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –≤ –Ω–∞—à —Ñ–∏—Ç–Ω–µ—Å-–∫–ª—É–±, —Å–¥–µ–ª–∞—é –∏–∑ —Ç–µ–±—è –≥–∏–≥–∞—á–∞–¥–∞ !";

      // –í—ã–Ω–µ—Å—Ç–∏ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥

      InlineKeyboardMarkup menu = new InlineKeyboardMarkup();
      List< List<InlineKeyboardButton> > buttonsMatrix =
        new ArrayList< List<InlineKeyboardButton> >();
      List< InlineKeyboardButton > buttonsRow = new ArrayList< InlineKeyboardButton >();

      var butSetSubscription = new InlineKeyboardButton();
      butSetSubscription.setText("ü¶æ –û—Ñ–æ—Ä–º–∏—Ç—å –∞–±–æ–Ω–µ–º–µ–Ω—Ç");
      butSetSubscription.setCallbackData(CALLBACK_SET_SUBSCRIPTION);

      var butNo = new InlineKeyboardButton();
      butNo.setText("ü§¨ –ù–µ, —è –Ω–µ —Ö–æ—á—É –∑–∞–Ω–∏–º–∞—Ç—å—Å—è");
      butNo.setCallbackData(CALLBACK_NO);

      buttonsRow.add(butNo);
      buttonsRow.add(butSetSubscription);

      buttonsMatrix.add(buttonsRow);
      menu.setKeyboard(buttonsMatrix);
      message.setReplyMarkup(menu);

    } else {
      answer = "ü´° –ó–¥—Ä–∞–≤–∏—è –∂–µ–ª–∞—é " + name + " !\n\n–Ø —Ç–µ–±—è —É–∑–Ω–∞–ª, —Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ " +
        "–ø–æ–º–æ–≥—É" +
        " " +
        "—Ç–µ–±–µ —Å–æ—Å—Ç–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ " +
        "—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∏–ª–∏ –≤—ã–≤–µ–¥—É –¥–µ–π—Å—Ç–≤—É—é—â–µ–µ.";

      InlineKeyboardMarkup menu = new InlineKeyboardMarkup();
      List< List<InlineKeyboardButton> > buttonsMatrix =
              new ArrayList< List<InlineKeyboardButton> >();
      List< InlineKeyboardButton > buttonsRow = new ArrayList< InlineKeyboardButton >();

      var butDeleteSubscription = new InlineKeyboardButton();
      butDeleteSubscription.setText("–ü–µ—Ä–µ—Å—Ç–∞—Ç—å —Ö–æ–¥–∏—Ç—å –Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏");
      butDeleteSubscription.setCallbackData(CALLBACK_DELETE_SUBSCRIPTION);

      buttonsRow.add(butDeleteSubscription);
      buttonsMatrix.add(buttonsRow);
      menu.setKeyboard(buttonsMatrix);
      message.setReplyMarkup(menu);
    }

    message.setText(answer);
    sendMessage(message);

    log.info("Replied to user " + name);
  }

  private void register(long chatId) {
    // TODO –ø—Ä–æ–≤–µ—Ä—è—Ç—å –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º.
    SendMessage message = new SendMessage();
    message.setChatId(chatId);

    if (userRepository.findById(chatId).isEmpty()) {

      InlineKeyboardMarkup menu = new InlineKeyboardMarkup();
      List< List<InlineKeyboardButton> > buttonsMatrix = new ArrayList< List<InlineKeyboardButton> >();
      List< InlineKeyboardButton > buttonsRow = new ArrayList< InlineKeyboardButton >();

      message.setText("ü´µ –í –Ω–∞—à–µ–º —Ñ–∏—Ç–Ω–µ—Å –∫–ª—É–±–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–π 3 –º–µ—Å—è—Ü–∞ " +
        "–±–µ—Å–ø–ª–∞—Ç–Ω–æ, –ø–æ—Ç–æ–º " +
        "10 000 —Ä—É–± " +
        "–≤ " +
        "–º–µ—Å—è—Ü," +
        " " +
        "–≤—ã —Å–æ–≥–ª–∞—Å–Ω—ã –∑–∞–ø–∏—Å–∞—Ç—å—Å—è ?");

      var but_yes = new InlineKeyboardButton();
      but_yes.setText("–î–∞");
      but_yes.setCallbackData(CALLBACK_YES);

      var but_no = new InlineKeyboardButton();
      but_no.setText("–ù–µ—Ç");
      but_no.setCallbackData(CALLBACK_NO);

      buttonsRow.add(but_no);
      buttonsRow.add(but_yes);

      buttonsMatrix.add(buttonsRow);
      menu.setKeyboard(buttonsMatrix);

      message.setReplyMarkup(menu);
    } else {
      // –£–∑–Ω–∞—Ç—å –∫–∞–∫ –∏–∑–≤–ª–µ–∫–∞—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (–Ω–∞–≤–µ—Ä–Ω–æ–µ —Å –ø–æ–º–æ—â—å—é –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ Query)
      message.setText("üíñ –í—ã —É–∂–µ –æ—Ñ–æ—Ä–º–∏–ª–∏ –∞–±–æ–Ω–µ–º–µ–Ω—Ç –∏ –æ–Ω –ø–æ–∫–∞ –¥–µ–π—Å—Ç–≤—É–µ—Ç");
    }
    sendMessage(message);
  }


  private void registerUser(Message message) {
    var chatId = message.getChatId();
    var chat = message.getChat();


    User user = new User();
    user.setChatId(chatId);
    user.setLastName(chat.getLastName());
    user.setFirstName(chat.getFirstName());
    user.setTrainerId(trainerId);
    user.setStartSubscriptionDate(LocalDate.now());
    user.setEndSubscriptionDate(user.getStartSubscriptionDate().plusMonths(3));
    // –ü–æ—Å–ª–µ–¥–Ω–∏–π –ø–∞—Ä–∞–º–µ—Ç—Ä –Ω–∞–¥–æ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã –±—Ä–∞—Ç—å.
    userRepository.save(user);
    // –û–ø–µ—Ä–∞—Ç–æ—Ä + -> –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω–Ω—ã–π –º–µ—Ç–æ–¥ toString
    log.info("User saved" + user);
  }

  private void chooseUserSpecialization(Long chatId) {
    SendMessage message = new SendMessage();
    message.setChatId(chatId);

    InlineKeyboardMarkup menu = new InlineKeyboardMarkup();
    List< List<InlineKeyboardButton> > buttonsMatrix = new ArrayList< List<InlineKeyboardButton> >();
    List< InlineKeyboardButton > buttonsRow = new ArrayList< InlineKeyboardButton >();

    message.setText("üí™üèº –ß–µ–º –±—ã –≤—ã —Ö–æ—Ç–µ–ª–∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –≤ –Ω–∞—à–µ–º –∑–∞–ª–µ ?");

    var but_fitness = new InlineKeyboardButton();
    but_fitness.setText("ü§∏üèΩ –§–∏—Ç–Ω–µ—Å");
    but_fitness.setCallbackData(CALLBACK_FITNESS);

    var but_bodybuilding = new InlineKeyboardButton();
    but_bodybuilding.setText("üèãÔ∏è‚Äç‚ôÇÔ∏è –ë–æ–¥–∏–±–∏–ª–¥–∏–Ω–≥");
    but_bodybuilding.setCallbackData(CALLBACK_BODYBUILDING);

    var but_yoga = new InlineKeyboardButton();
    but_yoga.setText("Ô∏èüßòüèΩ‚Äç‚ôÄÔ∏è –ô–æ–≥–∞");
    but_yoga.setCallbackData(CALLBACK_YOGA);

    buttonsRow.add(but_fitness);
    buttonsRow.add(but_bodybuilding);
    buttonsRow.add(but_yoga);

    buttonsMatrix.add(buttonsRow);
    menu.setKeyboard(buttonsMatrix);

    message.setReplyMarkup(menu);

    sendMessage(message);
  }
  private Long getSpecialTrainerId(String specialization) {
    List<Long> fitnessTrainersId = new ArrayList<Long>();
    for (Trainer t : trainerRepository.findAll()) {
      if (t.getSpecialization().equals(specialization)) {
        fitnessTrainersId.add(t.getTrainerId());
      }
    }
    int randomIndex = (int) (Math.random() * fitnessTrainersId.size());
    return fitnessTrainersId.get(randomIndex);
  }

  private void callbackDataEditMes(long chatId, long mesId, String text) {
    EditMessageText mes = new EditMessageText();
    mes.setChatId(chatId);
    mes.setMessageId((int) mesId);
    mes.setText(text);
    try {
      // –û—Ç–ø—Ä–∞–≤–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      execute(mes);
    } catch (TelegramApiException e) {
      log.error("Error occurred : " + e.getMessage());
    }
  }

}
